#!/usr/bin/env python3

import pytest
import numpy as np
from cmaze import analyze


def test_m1():
    in_maze = np.array([
        [-1, -1, -1,  0, -1, -1, -1,  0, -1, -1, -1],
        [-1,  0,  0,  0, -1,  0,  0,  0,  0,  0, -1],
        [-1, -1, -1,  0, -1, -1, -1, -1, -1,  0, -1],
        [-1,  0, -1,  0,  0,  0,  0,  0, -1,  0, -1],
        [-1,  0, -1, -1, -1, -1, -1, -1, -1,  0, -1],
        [ 0,  0, -1,  0,  0,  0,  0,  1,  0,  0, -1],
        [-1, -1, -1,  0, -1, -1, -1,  0, -1, -1, -1],
        [-1,  0,  0,  0, -1,  0, -1,  0, -1,  0,  0],
        [-1,  0, -1, -1, -1,  0, -1,  0, -1,  0, -1],
        [-1,  0, -1,  0,  0,  0,  0,  0, -1,  0, -1],
        [-1, -1, -1,  0, -1, -1, -1, -1, -1,  0, -1]
    ])
    m_directions = np.array([
        [b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'v', b'#', b'#', b'#'],
        [b'#', b' ', b' ', b' ', b'#', b'>', b'>', b'>', b'>', b'v', b'#'],
        [b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'#', b'#', b'v', b'#'],
        [b'#', b' ', b'#', b' ', b' ', b' ', b' ', b' ', b'#', b'v', b'#'],
        [b'#', b' ', b'#', b'#', b'#', b'#', b'#', b'#', b'#', b'v', b'#'],
        [b' ', b' ', b'#', b'>', b'>', b'>', b'>', b'X', b'<', b'<', b'#'],
        [b'#', b'#', b'#', b'^', b'#', b'#', b'#', b'^', b'#', b'#', b'#'],
        [b'#', b'>', b'>', b'^', b'#', b'v', b'#', b'^', b'#', b' ', b' '],
        [b'#', b'^', b'#', b'#', b'#', b'v', b'#', b'^', b'#', b' ', b'#'],
        [b'#', b'^', b'#', b'>', b'>', b'>', b'>', b'^', b'#', b' ', b'#'],
        [b'#', b'#', b'#', b'^', b'#', b'#', b'#', b'#', b'#', b' ', b'#']
    ])
    m_distances = np.array([
        [-1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1],
        [-1, -1, -1, -1, -1, 10,  9,  8,  7,  6, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1],
        [-1, -1, -1,  4,  3,  2,  1,  0,  1,  2, -1],
        [-1, -1, -1,  5, -1, -1, -1,  1, -1, -1, -1],
        [-1,  8,  7,  6, -1,  8, -1,  2, -1, -1, -1],
        [-1,  9, -1, -1, -1,  7, -1,  3, -1, -1, -1],
        [-1, 10, -1,  8,  7,  6,  5,  4, -1, -1, -1],
        [-1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1]
    ])
    m_reachable = False
    m = analyze(in_maze)

    assert np.array_equal(m_distances, m.distances)
    assert np.array_equal(m_directions, m.directions)
    assert m_reachable == m.is_reachable


def test_m2():
    in_maze = np.array([
        [-1, -1, -1, -1, -1],
        [ 0,  0,  0,  0, -1],
        [-1, -1, -1, -1, -1],
        [ 0,  0,  0,  1, -1],
        [-1,  0, -1, -1, -1],
        [-1,  0, -1,  0,  0],
        [-1, -1, -1,  0,  0]
    ])
    m_directions = np.array([
        [b'#', b'#', b'#', b'#', b'#'],
        [b' ', b' ', b' ', b' ', b'#'],
        [b'#', b'#', b'#', b'#', b'#'],
        [b'>', b'>', b'>', b'X', b'#'],
        [b'#', b'^', b'#', b'#', b'#'],
        [b'#', b'^', b'#', b' ', b' '],
        [b'#', b'#', b'#', b' ', b' ']
    ])
    m_distances = np.array([
        [-1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1],
        [ 3,  2,  1,  0, -1],
        [-1,  3, -1, -1, -1],
        [-1,  4, -1, -1, -1],
        [-1, -1, -1, -1, -1]
    ])
    m_reachable = False
    m = analyze(in_maze)

    assert np.array_equal(m_distances, m.distances)
    assert np.array_equal(m_directions, m.directions)
    assert m_reachable == m.is_reachable
    assert m.path(3, 0) == [(3, 0), (3, 1), (3, 2), (3, 3)]
    assert m.path(5, 1) == [(5, 1), (4, 1), (3, 1), (3, 2), (3, 3)]


def test_m3():
    in_maze = np.array([
        [-1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1],
        [-1,  0,  0,  0, -1,  0, -1,  0,  0,  0,  0,  0,  1],
        [-1,  0, -1, -1, -1,  0, -1,  0, -1, -1, -1, -1, -1],
        [-1,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0, -1],
        [-1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1,  0, -1],
        [ 0,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0,  0, -1],
        [-1, -1, -1,  0, -1, -1, -1,  0, -1,  0, -1, -1, -1],
        [ 0,  0, -1,  0, -1,  0,  0,  0, -1,  0, -1,  0,  0],
        [-1, -1, -1,  0, -1, -1, -1, -1, -1,  0, -1,  0, -1],
        [-1,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -1],
        [-1,  0, -1, -1, -1, -1, -1,  0, -1,  0, -1,  0, -1],
        [-1,  0, -1,  0,  0,  0, -1,  0,  0,  0, -1,  0, -1],
        [-1,  0, -1,  0, -1,  0, -1,  0, -1, -1, -1,  0, -1],
        [-1,  0, -1,  0, -1,  0, -1,  0, -1,  0,  0,  0, -1],
        [-1,  0, -1,  0, -1, -1, -1,  0, -1, -1, -1, -1, -1],
        [-1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
        [-1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    ])
    m_directions = np.array([
        [b'#', b'#', b'#', b'#', b'#', b'v', b'#', b'#', b'#', b'#', b'#', b'#', b'#'],
        [b'#', b'v', b'<', b'<', b'#', b'v', b'#', b'>', b'>', b'>', b'>', b'>', b'X'],
        [b'#', b'v', b'#', b'#', b'#', b'v', b'#', b'^', b'#', b'#', b'#', b'#', b'#'],
        [b'#', b'>', b'>', b'>', b'>', b'>', b'>', b'^', b'#', b' ', b' ', b' ', b'#'],
        [b'#', b'#', b'#', b'#', b'#', b'#', b'#', b'^', b'#', b'#', b'#', b' ', b'#'],
        [b' ', b' ', b' ', b' ', b' ', b' ', b'#', b'^', b'#', b' ', b' ', b' ', b'#'],
        [b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'^', b'#', b' ', b'#', b'#', b'#'],
        [b' ', b' ', b'#', b' ', b'#', b'>', b'>', b'^', b'#', b' ', b'#', b' ', b' '],
        [b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'#', b'#', b' ', b'#', b' ', b'#'],
        [b'#', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b'#', b' ', b'#'],
        [b'#', b' ', b'#', b'#', b'#', b'#', b'#', b' ', b'#', b' ', b'#', b' ', b'#'],
        [b'#', b' ', b'#', b' ', b' ', b' ', b'#', b' ', b' ', b' ', b'#', b' ', b'#'],
        [b'#', b' ', b'#', b' ', b'#', b' ', b'#', b' ', b'#', b'#', b'#', b' ', b'#'],
        [b'#', b' ', b'#', b' ', b'#', b' ', b'#', b' ', b'#', b' ', b' ', b' ', b'#'],
        [b'#', b' ', b'#', b' ', b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'#', b'#'],
        [b'#', b' ', b'#', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' ', b' '],
        [b'#', b'#', b'#', b' ', b'#', b'#', b'#', b'#', b'#', b'#', b'#', b'#', b'#']
    ])
    m_distances = np.array([
        [-1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1],
        [-1, 15, 16, 17, -1, 11, -1,  5,  4,  3,  2,  1,  0],
        [-1, 14, -1, -1, -1, 10, -1,  6, -1, -1, -1, -1, -1],
        [-1, 13, 12, 11, 10,  9,  8,  7, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, 13, 12, 11, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    ])
    m_reachable = False
    m = analyze(in_maze)

    assert np.array_equal(m_distances, m.distances)
    assert np.array_equal(m_directions, m.directions)
    assert m_reachable == m.is_reachable
    assert m.path(1, 3) == [(1, 3), (1, 2), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7),
                            (2, 7), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12)]
    assert m.path(7, 5) == [(7, 5), (7, 6), (7, 7), (6, 7), (5, 7), (4, 7), (3, 7), (2, 7), (1, 7), (1, 8), (1, 9),
                            (1, 10), (1, 11), (1, 12)]
    with pytest.raises(IndexError):
        m.path(0, 0,)
    with pytest.raises(IndexError):
        m.path(5, 0)
